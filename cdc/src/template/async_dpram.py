def gen_async_bram_file(module_name):
    lst_port = []
    lst_wire = []
    lst_inst = []

    lst_port.append("module "+module_name+"(")
    lst_port.append("    address0,")
    lst_port.append("    ce0,")
    lst_port.append("    d0,")
    lst_port.append("    we0,")
    lst_port.append("    q0,")
    lst_port.append("    reset0,") 
    lst_port.append("    clk0,")
    lst_port.append("    address1,") 
    lst_port.append("    ce1,")
    lst_port.append("    d1,") 
    lst_port.append("    we1,") 
    lst_port.append("    q1,") 
    lst_port.append("    reset1,") 
    lst_port.append("    clk1")
    lst_port.append("    );")
    lst_port.append("")
    lst_port.append("parameter DataWidth = 32;")
    lst_port.append("parameter AddressWidth = 8;")
    lst_port.append("parameter AddressRange = 256;")
    lst_port.append(" ")
    lst_port.append("input[AddressWidth-1:0] address0;")
    lst_port.append("input ce0;")
    lst_port.append("input[DataWidth-1:0] d0;")
    lst_port.append("input we0;")
    lst_port.append("output [DataWidth-1:0] q0;")
    lst_port.append("input reset0;")
    lst_port.append("input clk0;")
    lst_port.append("input[AddressWidth-1:0] address1;")
    lst_port.append("input ce1;")
    lst_port.append("input[DataWidth-1:0] d1;")
    lst_port.append("input we1;") 
    lst_port.append("output [DataWidth-1:0] q1;")
    lst_port.append("input reset1;")
    lst_port.append("input clk1;")

    lst_wire.append("wire           nc_dbiterra;")
    lst_wire.append("wire           nc_dbiterrb;")
    lst_wire.append("wire           nc_sbiterra;")
    lst_wire.append("wire           nc_sbiterrb;")

    lst_inst.append("xpm_memory_tdpram #(")
    lst_inst.append("      .ADDR_WIDTH_A(AddressWidth),")
    lst_inst.append("      .ADDR_WIDTH_B(AddressWidth),")
    lst_inst.append("      .AUTO_SLEEP_TIME(0),")
    lst_inst.append("      .BYTE_WRITE_WIDTH_A(DataWidth),")
    lst_inst.append("      .BYTE_WRITE_WIDTH_B(DataWidth),")
    lst_inst.append("      .CASCADE_HEIGHT(0),")
    lst_inst.append("      .CLOCKING_MODE(\"independent\"),")
    lst_inst.append("      .ECC_BIT_RANGE(\"7:0\"),")
    lst_inst.append("      .ECC_MODE(\"no_ecc\"),")
    lst_inst.append("      .ECC_TYPE(\"none\"),")
    lst_inst.append("      .IGNORE_INIT_SYNTH(0),")
    lst_inst.append("      .MEMORY_INIT_FILE(\"none\"),")
    lst_inst.append("      .MEMORY_INIT_PARAM(\"0\"),")
    lst_inst.append("      .MEMORY_OPTIMIZATION(\"true\"),")
    lst_inst.append("      .MEMORY_PRIMITIVE(\"auto\"),")
    lst_inst.append("      .MEMORY_SIZE(AddressRange*DataWidth),")
    lst_inst.append("      .MESSAGE_CONTROL(0),")
    lst_inst.append("      .RAM_DECOMP(\"auto\"),")
    lst_inst.append("      .READ_DATA_WIDTH_A(DataWidth),")
    lst_inst.append("      .READ_DATA_WIDTH_B(DataWidth),")
    lst_inst.append("      .READ_LATENCY_A(1),")
    lst_inst.append("      .READ_LATENCY_B(1),")
    lst_inst.append("      .READ_RESET_VALUE_A(\"0\"),")
    lst_inst.append("      .READ_RESET_VALUE_B(\"0\"),")
    lst_inst.append("      .RST_MODE_A(\"SYNC\"),")
    lst_inst.append("      .RST_MODE_B(\"SYNC\"),")
    lst_inst.append("      .SIM_ASSERT_CHK(0),")
    lst_inst.append("      .USE_EMBEDDED_CONSTRAINT(0),")
    lst_inst.append("      .USE_MEM_INIT(1),")
    lst_inst.append("      .USE_MEM_INIT_MMI(0),")
    lst_inst.append("      .WAKEUP_TIME(\"disable_sleep\"),")
    lst_inst.append("      .WRITE_DATA_WIDTH_A(DataWidth),")
    lst_inst.append("      .WRITE_DATA_WIDTH_B(DataWidth),")
    lst_inst.append("      .WRITE_MODE_A(\"no_change\"),")
    lst_inst.append("      .WRITE_MODE_B(\"no_change\"),")
    lst_inst.append("      .WRITE_PROTECT(1)")
    lst_inst.append("   ) xpm_memory_tdpram_inst (")
    lst_inst.append("      .dbiterra         (nc_dbiterra),")
    lst_inst.append("      .dbiterrb         (nc_dbiterrb),")
    lst_inst.append("      .douta            (q0),")
    lst_inst.append("      .doutb            (q1),")
    lst_inst.append("      .sbiterra         (nc_sbiterra),")
    lst_inst.append("      .sbiterrb         (nc_sbiterrb),")
    lst_inst.append("      .addra            (address0),")
    lst_inst.append("      .addrb            (address1),")
    lst_inst.append("      .clka             (clk0),")
    lst_inst.append("      .clkb             (clk1),")
    lst_inst.append("      .dina             (d0),")
    lst_inst.append("      .dinb             (d1),")
    lst_inst.append("      .ena              (ce0),")
    lst_inst.append("      .enb              (ce1),")
    lst_inst.append("      .injectdbiterra   (),")
    lst_inst.append("      .injectdbiterrb   (),")
    lst_inst.append("      .injectsbiterra   (),")
    lst_inst.append("      .injectsbiterrb   (),")
    lst_inst.append("      .regcea           (1'b1),")
    lst_inst.append("      .regceb           (1'b1),")
    lst_inst.append("      .rsta             (reset0),")
    lst_inst.append("      .rstb             (reset1),")
    lst_inst.append("      .sleep            (1'b0),")
    lst_inst.append("      .wea              (we0),")
    lst_inst.append("      .web              (we1)")
    lst_inst.append("   );")
    lst_inst.append("endmodule")

    with open(module_name+".v", "w") as f:
        for i in (lst_port + ["\n"] + lst_wire + ["\n"] + lst_inst):
            f.write(i)
            f.write("\n")

def gen_async_bram_inst(module_name, inst_name, port_dic, factors):
    gen_async_bram_file(module_name)
    
    data_width = factors[0]
    address_width = factors[1]
    address_range = factors[2]

    port0 = port_dic[list(port_dic.keys())[0]]
    port1 = port_dic[list(port_dic.keys())[1]]

    lst_inst = []
    lst_inst.append("module "+module_name+"(")
    lst_inst.append("    input address);")

    lst_inst.append(module_name+" #(")
    lst_inst.append("   .DataWidth     ("+str(data_width)+"),")
    lst_inst.append("   .AddressRange  ("+str(address_range)+"),")
    lst_inst.append("   .AddressWidth  ("+str(address_width)+")")
    lst_inst.append(") "+inst_name+" (")
    lst_inst.append("    .address0      ("+port0[2]+"),")
    lst_inst.append("    .ce0           ("+port0[0]+"),")
    lst_inst.append("    .d0            ("+port0[3]+"),")
    lst_inst.append("    .we0           ("+port0[1]+"),")
    lst_inst.append("    .q0            ("+port0[4]+"),")
    lst_inst.append("    .reset0        ("+port0[6]+"),") 
    lst_inst.append("    .clk0          ("+port0[5]+"),")
    lst_inst.append("    .address1      ("+port1[2]+"),")
    lst_inst.append("    .ce1           ("+port1[0]+"),")
    lst_inst.append("    .d1            ("+port1[3]+"),")
    lst_inst.append("    .we1           ("+port1[1]+"),")
    lst_inst.append("    .q1            ("+port1[4]+"),")
    lst_inst.append("    .reset1        ("+port1[6]+"),") 
    lst_inst.append("    .clk1          ("+port1[5]+"));")
    
    lst_inst.append("endmodule")
    with open(module_name+"_inst.v", "w") as f:
        for i in lst_inst:
            f.write(i)
            f.write("\n")
